-- supabase_schema.sql
-- Migration for Booklet: reader_progress, highlights, bookmarks
-- Includes indexes, updated_at trigger, and Row Level Security (RLS) policies
-- Note: policies cast auth.uid() to text (auth.uid()::text) to match user_id column type

-- === Create tables ===
create table if not exists public.reader_progress (
  id bigint generated by default as identity primary key,
  user_id text not null,
  item_id text not null,
  progress int default 0 not null,
  updated_at timestamptz default now() not null,
  constraint ux_reader_progress unique (user_id, item_id)
);

create table if not exists public.highlights (
  id bigint generated by default as identity primary key,
  user_id text not null,
  item_id text not null,
  text text,
  position jsonb,
  created_at timestamptz default now() not null
);

create table if not exists public.bookmarks (
  id bigint generated by default as identity primary key,
  user_id text not null,
  item_id text not null,
  position int,
  created_at timestamptz default now() not null
);

-- === Indexes ===
create index if not exists idx_reader_progress_user on public.reader_progress (user_id);
create index if not exists idx_reader_progress_item on public.reader_progress (item_id);

create index if not exists idx_highlights_user on public.highlights (user_id);
create index if not exists idx_highlights_item on public.highlights (item_id);

create index if not exists idx_bookmarks_user on public.bookmarks (user_id);
create index if not exists idx_bookmarks_item on public.bookmarks (item_id);

-- === updated_at trigger helper (for reader_progress) ===
create or replace function public.set_updated_at_column()
returns trigger
language plpgsql
as $$
begin
  new.updated_at = now();
  return new;
end;
$$;

drop trigger if exists trg_set_updated_at on public.reader_progress;
create trigger trg_set_updated_at
  before update on public.reader_progress
  for each row
  execute function public.set_updated_at_column();

-- === Row Level Security (RLS) ===
-- Use auth.uid()::text in policies so it matches user_id (text) column type

-- reader_progress RLS
alter table public.reader_progress enable row level security;

drop policy if exists reader_progress_select_own on public.reader_progress;
drop policy if exists reader_progress_insert_own on public.reader_progress;
drop policy if exists reader_progress_update_own on public.reader_progress;
drop policy if exists reader_progress_delete_own on public.reader_progress;

create policy reader_progress_select_own on public.reader_progress
  for select
  using (user_id = auth.uid()::text);

create policy reader_progress_insert_own on public.reader_progress
  for insert
  with check (user_id = auth.uid()::text);

create policy reader_progress_update_own on public.reader_progress
  for update
  using (user_id = auth.uid()::text)
  with check (user_id = auth.uid()::text);

create policy reader_progress_delete_own on public.reader_progress
  for delete
  using (user_id = auth.uid()::text);

-- highlights RLS
alter table public.highlights enable row level security;

drop policy if exists highlights_select_own on public.highlights;
drop policy if exists highlights_insert_own on public.highlights;
drop policy if exists highlights_update_own on public.highlights;
drop policy if exists highlights_delete_own on public.highlights;

create policy highlights_select_own on public.highlights
  for select
  using (user_id = auth.uid()::text);

create policy highlights_insert_own on public.highlights
  for insert
  with check (user_id = auth.uid()::text);

create policy highlights_update_own on public.highlights
  for update
  using (user_id = auth.uid()::text)
  with check (user_id = auth.uid()::text);

create policy highlights_delete_own on public.highlights
  for delete
  using (user_id = auth.uid()::text);

-- bookmarks RLS
alter table public.bookmarks enable row level security;

drop policy if exists bookmarks_select_own on public.bookmarks;
drop policy if exists bookmarks_insert_own on public.bookmarks;
drop policy if exists bookmarks_update_own on public.bookmarks;
drop policy if exists bookmarks_delete_own on public.bookmarks;

create policy bookmarks_select_own on public.bookmarks
  for select
  using (user_id = auth.uid()::text);

create policy bookmarks_insert_own on public.bookmarks
  for insert
  with check (user_id = auth.uid()::text);

create policy bookmarks_update_own on public.bookmarks
  for update
  using (user_id = auth.uid()::text)
  with check (user_id = auth.uid()::text);

create policy bookmarks_delete_own on public.bookmarks
  for delete
  using (user_id = auth.uid()::text);

-- === Optional: sample data (uncomment and set user ids) ===
-- insert into public.reader_progress (user_id, item_id, progress) values ('<user-uuid>', 'https://example.com/article-1', 12);
-- insert into public.highlights (user_id, item_id, text, position) values ('<user-uuid>', 'https://example.com/article-1', 'Important note', '{"top":100,"left":10}');
-- insert into public.bookmarks (user_id, item_id, position) values ('<user-uuid>', 'https://example.com/article-1', 450);

-- End of migration
